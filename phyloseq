#### Removing likely contaminants using DECONTAM

# loading libraries
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("decontam")
library(decontam)
packageVersion("decontam")

# loading data (output from DADA2)
asv_tab <- read_csv("ASV_table_400.rds") %>% column_to_rownames("...1")
asv_tax <- read_csv("taxa_table_400.rds") %>% column_to_rownames("...1") %>% as.matrix(.)
asv_tab  <- t(asv_tab)

# For decontam to work on our data, we need to provide it with our count table, 
# currently stored in the “asv_tab” variable, and we need to give it a logical 
# vector that tells it which samples are “blanks”. Here is making that vector 
# and running the program:
colnames(asv_tab) # our blanks are the first 2 of 268 samples in this case
vector_for_decontam <- c(rep(TRUE, 2), rep(FALSE, 266))

contam_df <- isContaminant(t(asv_tab), neg=vector_for_decontam)
head(contam_df)
table(contam_df$contaminant) # identified 195 as contaminants
contam_df$contaminant

# getting vector holding the identified contaminant IDs
contam_asvs <- row.names(contam_df[contam_df$contaminant == TRUE, ])
contam_asvs
contam_taxa <- asv_tax[row.names(asv_tax) %in% contam_asvs, ]
write.table(contam_taxa, "contam_taxa")
# making new count table
asv_tab_no_contam <- asv_tab[!row.names(asv_tab) %in% contam_asvs, ]

# making new taxonomy table
asv_tax_no_contam <- asv_tax[!row.names(asv_tax) %in% contam_asvs, ]

# saving outputs
write(asv_fasta_no_contam, "ASVs-no-contam.fa")
saveRDS(asv_tab_no_contam, file = "ASV_table_no_contam.rds")
saveRDS(asv_tax_no_contam, file = "taxa_table_no_contam.rds")

#### now creating a phyloseq object using PHYLOSEQ
# using DADA2 and decontam outputs

# load libraries
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("phyloseq", force = TRUE)
library(Biostrings); packageVersion("Biostrings")
library(phyloseq)
remove.packages("data.table")
install.packages("data.table", type = "source",
                 repos = "https://Rdatatable.gitlab.io/data.table")
library(data.table)
library(dplyr)
library(reshape)
library(tidyverse)
library(tibble)
setwd("working_directory")

##read in mapping file
samdf1 <- read.csv("metafile.csv", header=T, row.names = 1)
head(samdf1); dim(samdf1); class(samdf1)

##read in taxonomy file
taxa_dec <- readRDS("taxa_table_no_contam.rds")
taxa_dec[1:3,1:3]; dim(taxa_dec); class(taxa_dec)
taxa2 <- data.frame(tax_table(taxa_dec, "matrix"))
taxa2[1:3,1:3]; dim(taxa2); class(taxa2)
taxa2 <- data.matrix(taxa2)
dim(taxa2); class(taxa2)# should be matrix 
taxa2[1:3,1:3]; dim(taxa2); class(taxa2)
taxa2.print <- taxa2 # Removing sequence rownames for display only
rownames(taxa2.print) <- NULL
head(taxa2.print)

##read in sequence file
seqtab.nochim_dec <- readRDS("ASV_table_no_contam.rds")
class(seqtab.nochim_dec)
seqtab.nochim2 <- as.matrix(seqtab.nochim_dec)# convert to matrix 
seqtab.nochim2 <- as_tibble(seqtab.nochim_dec)
seqtab.nochim2[1:3,1:3]; dim(seqtab.nochim2); class(seqtab.nochim2)
seqtab.nochim2 <- data.matrix(seqtab.nochim2)
seqtab.nochim2[1:3,1:3]; dim(seqtab.nochim2); class(seqtab.nochim2)# should be matrix 

# create a phyloseq object - ASV table
ps1 <- phyloseq(otu_table(seqtab.nochim2, taxa_are_rows=FALSE),
                sample_data(samdf1),
                tax_table(taxa2))
ps1

# replace sequences with ASV numbers
dna <- Biostrings::DNAStringSet(taxa_names(ps1))
names(dna) <- taxa_names(ps1)
ps1 <- merge_phyloseq(ps1, dna)
taxa_names(ps1) <- paste0("ASV", seq(ntaxa(ps1)))
ps1
saveRDS(ps1,file = "phyloseq_object.rds")

#### phyloseq object clean up 
#Remove chloroplasts, mitochondria, eukaryota, and ASVs without a domain.
PS_clean <- ps1 %>%
  subset_taxa(Kingdom != "Eukaryota" & Kingdom != "NA" & Order   != "Chloroplast" & Family  != "Mitochondria" &            
                Order   != "Chloroplast")                #filter out chloroplasts, mitochondria, eukaryota, and ASVs without a domain.
PS_clean
saveRDS(PS_clean,file = "phyloseq_clean.rds")

# Summarize the number of reads per sample
Reads_per_sample = data.table(as(sample_data(PS_clean), "data.frame"),
                              TotalReads = sample_sums(PS_clean), keep.rownames = TRUE)
setnames(Reads_per_sample, "rn", "SampleID")
write.csv(Reads_per_sample, file="1Reads_per_sample.csv")

# Remove samples with fewer than 1000 sequences
ps_reads_1000 = prune_samples(sample_sums(PS_clean) > 1000, PS_clean)
ps_reads_1000
saveRDS(ps_reads_1000,file = "phyloseq_clean_1000.rds")

# romove singletons
ps_nosingletons <- prune_taxa(taxa_sums(ps_reads_1000) > 1, ps_reads_1000)
ps_nosingletons
saveRDS(ps_nosingletons, file = "phyloseq_no_singletons.rds")

# rarefy to even depth
ps_rarefied <- rarefy_even_depth(ps_nosingletons, sample.size = min(sample_sums(ps_nosingletons)),
                                  rngseed = TRUE, replace = TRUE, trimOTUs = TRUE, verbose = TRUE)
ps_rarefied
saveRDS(ps_rarefied, file="ps_rarefied.rds")


## end of phyloseq
